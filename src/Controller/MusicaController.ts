import { MusicaService } from '../Service/MusicaService';
import { Musica, MusicaBanda, MusicaProdutora } from '../Models/Musica';

export class MusicaController {
  private service: MusicaService;

  constructor() {
    this.service = new MusicaService();
  }

  async criar(nomeMusica: string, idBanda: number, idProdutora: number): Promise<void> {
    try {
      if (typeof nomeMusica !== 'string' || !nomeMusica.trim()) {
        console.error('‚ùå Nome da m√∫sica √© obrigat√≥rio.');
        return;
      }
      if (!Number.isInteger(idBanda) || idBanda <= 0) {
        console.error('‚ùå ID da banda √© obrigat√≥rio e deve ser um inteiro positivo.');
        return;
      }
      if (!Number.isInteger(idProdutora) || idProdutora <= 0) {
        console.error('‚ùå ID da produtora √© obrigat√≥rio e deve ser um inteiro positivo.');
        return;
      }

      const musica: Musica = { nomemusica: nomeMusica.trim() };
      const resultado = await this.service.createMusica(musica, idBanda, idProdutora);
      console.log('‚úÖ M√∫sica criada com sucesso:', resultado);
    } catch (error) {
      console.error('‚ùå Erro ao criar m√∫sica:', error);
      throw error;
    }
  }

  async listar(): Promise<void> {
    try {
      const musicas = await this.service.getAllMusicas();
      if (!Array.isArray(musicas) || musicas.length === 0) {
        console.log('‚Äî Nenhuma m√∫sica cadastrada ‚Äî');
        return;
      }
      const formatado = musicas.map(m => ({
        ID: m.id_musica,
        Nome: m.nomemusica
      }));
      console.table(formatado, ['ID', 'Nome']);
    } catch (error) {
      console.error('‚ùå Erro ao listar m√∫sicas:', error);
      throw error;
    }
  }

  async buscarPorId(id: number): Promise<void> {
    try {
      if (!Number.isInteger(id) || id <= 0) {
        console.error('‚ùå ID inv√°lido. Deve ser um inteiro positivo.');
        return;
      }

      const musica = await this.service.getMusicaById(id);
      if (!musica) {
        console.log('‚ùå M√∫sica n√£o encontrada');
        return;
      }

      console.log('\nüéµ M√∫sica encontrada:');
      console.log(musica);

      try {
        const bandas = await this.service.getBandasDaMusica(id);
        if (Array.isArray(bandas) && bandas.length > 0) {
          console.log('\nüé∏ Bandas:');
          console.table(bandas);
        } else {
          console.log('‚Äî Nenhuma banda vinculada a esta m√∫sica ‚Äî');
        }
      } catch (innerErr) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar bandas da m√∫sica:', innerErr);
      }

      try {
        const produtoras = await this.service.getProdutorasDaMusica(id);
        if (Array.isArray(produtoras) && produtoras.length > 0) {
          console.log('\nüè¢ Produtoras:');
          console.table(produtoras);
        } else {
          console.log('‚Äî Nenhuma produtora vinculada a esta m√∫sica ‚Äî');
        }
      } catch (innerErr) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar produtoras da m√∫sica:', innerErr);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar m√∫sica:', error);
      throw error;
    }
  }

  async atualizar(id: number, nomeMusica: string): Promise<void> {
    try {
      if (!Number.isInteger(id) || id <= 0) {
        console.error('‚ùå ID inv√°lido. Deve ser um inteiro positivo.');
        return;
      }
      if (typeof nomeMusica !== 'string' || !nomeMusica.trim()) {
        console.error('‚ùå Nome da m√∫sica √© obrigat√≥rio.');
        return;
      }

      const musica: Musica = { nomemusica: nomeMusica.trim() };
      const resultado = await this.service.updateMusica(id, musica);
      if (resultado) {
        console.log('‚úÖ M√∫sica atualizada com sucesso:', resultado);
      } else {
        console.log('‚ùå N√£o foi poss√≠vel atualizar ‚Äî m√∫sica n√£o encontrada.');
      }
    } catch (error) {
      console.error('‚ùå Erro ao atualizar m√∫sica:', error);
      throw error;
    }
  }

  async deletar(id: number): Promise<void> {
    try {
      if (!Number.isInteger(id) || id <= 0) {
        console.error('‚ùå ID inv√°lido. Deve ser um inteiro positivo.');
        return;
      }

      const sucesso = await this.service.deleteMusica(id);
      if (sucesso) {
        console.log('‚úÖ M√∫sica deletada com sucesso');
      } else {
        console.log('‚ùå N√£o foi poss√≠vel deletar ‚Äî m√∫sica n√£o encontrada.');
      }
    } catch (error) {
      console.error('‚ùå Erro ao deletar m√∫sica:', error);
      throw error;
    }
  }

  async vincularComBanda(idMusica: number, idBanda: number): Promise<void> {
    try {
      if (!Number.isInteger(idMusica) || idMusica <= 0) {
        console.error('‚ùå idMusica inv√°lido. Deve ser um inteiro positivo.');
        return;
      }
      if (!Number.isInteger(idBanda) || idBanda <= 0) {
        console.error('‚ùå idBanda inv√°lido. Deve ser um inteiro positivo.');
        return;
      }

      const vinculo: MusicaBanda = { id_musica: idMusica, id_banda: idBanda };
      await this.service.vincularBanda(vinculo);
      console.log('‚úÖ M√∫sica vinculada √† banda com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao vincular m√∫sica com banda:', error);
      throw error;
    }
  }

  async vincularComProdutora(idMusica: number, idProdutora: number): Promise<void> {
    try {
      if (!Number.isInteger(idMusica) || idMusica <= 0) {
        console.error('‚ùå idMusica inv√°lido. Deve ser um inteiro positivo.');
        return;
      }
      if (!Number.isInteger(idProdutora) || idProdutora <= 0) {
        console.error('‚ùå idProdutora inv√°lido. Deve ser um inteiro positivo.');
        return;
      }

      const vinculo: MusicaProdutora = { id_musica: idMusica, id_produtora: idProdutora };
      await this.service.vincularProdutora(vinculo);
      console.log('‚úÖ M√∫sica vinculada √† produtora com sucesso');
    } catch (error) {
      console.error('‚ùå Erro ao vincular m√∫sica com produtora:', error);
      throw error;
    }
  }
}